%% 2-D FEM (Laplace Eigen Problem on [0, pi]^2)
% Smallest eigen value = 2
% Corresponding eigen function = (2/pi)*sin(x)*sin(y)

% Set-up
v = @(x, y)(0);
xy_ep = [0 pi 0 pi];
gqr = [6 6];

% Solve the problem
lambda_ref = 2;
x_ref = @(x, y)(2/pi*sin(x)*sin(y));
N_list = 2.^(3:7)+1;
x_err = N_list;
lambda_list = N_list;
H_cell = cell(length(N_list), 1);
M_cell = H_cell;
x_cell = H_cell;
for i = 1:length(N_list)
    [H_cell{i}, M_cell{i}] = fem_mat_2d_boost(v, N_list(i), xy_ep, ...
                                              {'Laplace', 'Mass'}, gqr);
    [x_cell{i}, lambda_list(i)] = eigs(H_cell{i}, M_cell{i}, ...
                                       1, 'smallestabs', ...
                                       'Tolerance', 1e-14, ...
                                       'MaxIterations', 10^8);
end

% Plot
ann_text = ['Problem:', newline, ...
            '$-{\Delta}u={\lambda}u\enspace$ on $\enspace\Omega=[0, \pi]^2$', ...
            newline, '$\quad\enspace\,u = 0\:\:\,\enspace$ on $\enspace\partial\Omega$', newline, ...
            'Tolerance = $10^{-14}$', newline, 'Reference:', newline, ...
            '$\qquad\,\lambda_{min}=2$', newline, ...
            '$f_{min}(x, y)=\frac{2}{\pi}sin(x)sin(y)$'];

fem_err_plot(pi./N_list, abs(lambda_list-lambda_ref), 10, ...
             'h', 'err', -1.7:0.1:-0.4, -4.4:0.2:-1.2, [2 0.5], ...
             'Eigen Value Error ($d = 3\sim7$)', 'Method', 'eigs()', ...
             [-0.9 -3.6], ann_text)

for i = 1:length(N_list)
    x_err(i) = fem_err_2d_update(x_cell{i}, x_ref, xy_ep, 'L2', gqr);
end
fem_err_plot(pi./N_list, x_err, 10, ...
             'h', 'err', -1.7:0.1:-0.4, -4.8:0.2:-1.8, [2 0.5], ...
             'Eigen Function $L_2$ Error ($d = 3\sim7$)', 'Method', ...
             'eigs()', [-0.9 -4.1], ann_text)

for i = 1:length(N_list)
    x_err(i) = fem_err_2d_update(x_cell{i}, x_ref, xy_ep, 'H1', gqr);
end
fem_err_plot(pi./N_list, x_err, 10, ...
             'h', 'err', -1.7:0.1:-0.4, -2.6:0.2:-0.8, [1 0.5], ...
             'Eigen Function $H^1$ Error ($d = 3\sim7$)', 'Method', ...
             'eigs()', [-0.9 -2.2], ann_text)

%% 2-D FEM (Potential = 1/|x-y|)
% Refenrece: solution when d = 8

% Set-up
v = @(x, y)(1/abs(x-y));
xy_ep = [1 3 4 6];
gqr = [6 5];

% Reference
N_ref = 2^8+1;
[H_ref, M_ref] = fem_mat_2d_boost(v, N_ref, xy_ep, ...
                                  {'Laplace+Potential', 'Mass'}, gqr);
[x_ref, lambda_ref] = eigs(H_ref, M_ref, 1, 'smallestabs', ...
                           'Tolerance', 1e-14, 'MaxIterations', 10^8);

% Solve the problem
N_list = 2.^(3:7)+1;
x_err = N_list;
lambda_list = N_list;
H_cell = cell(length(N_list), 1);
M_cell = H_cell;
x_cell = H_cell;
for i = 1:length(N_list)
    [H_cell{i}, M_cell{i}] = fem_mat_2d_boost(v, N_list(i), xy_ep, ...
                                       {'Laplace+Potential', 'Mass'}, gqr);
    [x_cell{i}, lambda_list(i)] = eigs(H_cell{i}, M_cell{i}, ...
                                       1, 'smallestabs', ...
                                       'Tolerance', 1e-14, ...
                                       'MaxIterations', 10^8);
end

% Plot
ann_text = ['Problem:', newline, ...
            '$-{\Delta}u+\frac{1}{|x-y|}u={\lambda}u\enspace$ on $\enspace\Omega=[1,3]\times[4,6]$', ...
            newline, '$\qquad\qquad\quad\,\,u = 0\enspace\:\enspace$ on $\enspace\partial\Omega$', newline, ...
            'Tolerance = $10^{-14}$', newline, 'Reference: $d=8$'];

fem_err_plot(2./N_list, abs(lambda_list-lambda_ref), 10, ...
             'h', 'err', -1.9:0.1:-0.5, -4:0.2:-1, [2 0.5], ...
             'Eigen Value Error ($d = 5\sim7$)', 'Method', 'eigs()', ...
             [-1.2 -3.5], ann_text)

for i = 1:length(N_list)
    x_err(i) = fem_err_2d_update(x_cell{i}, x_ref, xy_ep, 'L2', gqr);
end
fem_err_plot(2./N_list, x_err, 10, ...
             'h', 'err', -1.9:0.1:-0.5, -5:0.2:-2.4, [2 0.55], ...
             'Eigen Function $L_2$ Error ($d = 5\sim7$)', 'Method', ...
             'eigs()', [-1.2 -4.5], ann_text)

for i = 1:length(N_list)
    x_err(i) = fem_err_2d_update(x_cell{i}, x_ref, xy_ep, 'H1', gqr);
end
fem_err_plot(2./N_list, x_err, 10, ...
             'h', 'err', -1.9:0.1:-0.5, -3.8:0.2:-2, [1 0.55], ...
             'Eigen Function $H^1$ Error ($d = 5\sim7$)', 'Method', ...
             'eigs()', [-1.2 -3.5], ann_text)
